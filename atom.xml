<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chiahsien.github.io</id>
    <title>Nelson</title>
    <updated>2021-07-10T03:54:08.510Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chiahsien.github.io"/>
    <link rel="self" href="https://chiahsien.github.io/atom.xml"/>
    <subtitle>沒有廢話的心得與筆記</subtitle>
    <logo>https://chiahsien.github.io/images/avatar.png</logo>
    <icon>https://chiahsien.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Nelson</rights>
    <entry>
        <title type="html"><![CDATA[macOS 的「公用」與「投遞箱」目錄的用途]]></title>
        <id>https://chiahsien.github.io/post/public-and-drop-box-folders-in-macos/</id>
        <link href="https://chiahsien.github.io/post/public-and-drop-box-folders-in-macos/">
        </link>
        <updated>2021-07-10T03:26:43.000Z</updated>
        <content type="html"><![CDATA[<p>在每個 macOS 使用者的根目錄底下都有一個「公用 (Public)」目錄，而且這個目錄裡頭還有一個「投遞箱 (Drop Box)」目錄，身為 Mac 使用者這麼多年一直不知道它們的真正用途，直到最近...</p>
<p>最近因應疫情，很多人必須使用自己的電腦在家工作，然而我家只有一台電腦，所以我就幫家人建立一個新的使用者帳號方便工作用。建立好新的使用者帳號之後，該怎麼讓不同帳號之間共享檔案呢？這時候就需要「公用」跟「投遞箱」了：</p>
<ul>
<li>你要給別人：你放在「公用」目錄裡頭的檔案可以讓其他帳號存取，但是其他人無法修改或刪除檔案。</li>
<li>別人要給你：其他帳號可以把檔案拖移到你的「投遞箱」目錄，但是只有你看得到「投遞箱」的內容，其他帳號看不到。</li>
</ul>
<p>更詳細的說明可以參考<a href="https://support.apple.com/zh-tw/guide/mac-help/mchlp1122/11.0/mac/11.0">蘋果官方說明文件</a>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[讓 Xcode 專案易於版本控制的方法 - 使用 git pre-commit hook]]></title>
        <id>https://chiahsien.github.io/post/xcode-project-version-control-git-pre-commit-hook/</id>
        <link href="https://chiahsien.github.io/post/xcode-project-version-control-git-pre-commit-hook/">
        </link>
        <updated>2021-06-22T00:31:11.000Z</updated>
        <summary type="html"><![CDATA[<p>好幾年前我曾經寫過一篇<a href="../../post/let-xcode-project-easy-to-do-version-control/">讓 Xcode 專案易於版本控制的方法</a>，它非常的好用，我也在多個專案裡頭使用這樣的配置用了好多年，都沒有出過什麼問題。</p>
<p>直到最近遇到了 SwiftUI 的 Preview 功能。</p>
<p>猜測可能是因為原先的設定是在 Build phase 去執行排序的 script，導致它破壞了 SwiftUI Preview 的一些機制，我想到了幾個解法，像是</p>
<ul>
<li>不要放在 Build phase，放到 Run phase 去執行。</li>
<li>改用 <a href="https://github.com/yonaskolb/XcodeGen">XcodeGen</a> 之類的工具產生 project file。</li>
<li>使用 git hook 的 pre-commit 來執行排序。</li>
<li>不要用，等真的遇到 merge conflict 了再說 lol</li>
</ul>
<p>最後我選擇了 pre-commit 的做法。</p>
]]></summary>
        <content type="html"><![CDATA[<p>好幾年前我曾經寫過一篇<a href="../../post/let-xcode-project-easy-to-do-version-control/">讓 Xcode 專案易於版本控制的方法</a>，它非常的好用，我也在多個專案裡頭使用這樣的配置用了好多年，都沒有出過什麼問題。</p>
<p>直到最近遇到了 SwiftUI 的 Preview 功能。</p>
<p>猜測可能是因為原先的設定是在 Build phase 去執行排序的 script，導致它破壞了 SwiftUI Preview 的一些機制，我想到了幾個解法，像是</p>
<ul>
<li>不要放在 Build phase，放到 Run phase 去執行。</li>
<li>改用 <a href="https://github.com/yonaskolb/XcodeGen">XcodeGen</a> 之類的工具產生 project file。</li>
<li>使用 git hook 的 pre-commit 來執行排序。</li>
<li>不要用，等真的遇到 merge conflict 了再說 lol</li>
</ul>
<p>最後我選擇了 pre-commit 的做法。</p>
<!-- more -->
<p>如同在<a href="../../post/let-xcode-project-easy-to-do-version-control/">讓 Xcode 專案易於版本控制的方法</a>這篇提到的，我的腳本都放在專案根目錄底下的 <code>Scripts</code> 目錄裡頭。</p>
<h3 id="1">1.</h3>
<p>首先建立一個 <code>pre-commit.sh</code> 放在 <code>Scripts</code> 目錄裡，它會檢查修改的檔案有沒有 <code>project.pbxproj</code> 檔，有的話就排序它然後把它加回 git 版控，這樣我們就不用再手動加一次。檔案內容如下：</p>
<pre><code class="language-bash">#!/bin/sh
#
# Following script is to sort Xcode project files, and add them back to version control.
# The reason to sort project file is that it can reduce project.pbxproj file merging conflict possibility.
#
echo 'Sorting Xcode project files'

script_name=&quot;./Scripts/sort-Xcode-project-file&quot;
modifiedProjectFiles=( $(git diff --name-only --cached | grep &quot;project.pbxproj&quot;) )

for filePath in ${modifiedProjectFiles[@]}; do
  perl $script_name $filePath
  git add $filePath
done

echo 'Done sorting Xcode project files'

exit 0
</code></pre>
<h3 id="2">2.</h3>
<p>我把這個檔案放在 <code>Scripts</code> 目錄裡而不是直接去修改 <code>.git/hooks/pre-commit</code> 檔的原因是因為這樣才可以把它加入版本控管，讓團隊其他成員也可以用。所以現在我們需要一個方法讓 <code>pre-commit</code> 執行這個檔案，我在 <code>Scripts</code> 目錄底下新增了一個 <code>install-git-hooks.sh</code> 並 <code>chmod 755</code> 讓它可以被執行，內容如下：</p>
<pre><code class="language-bash">#!/bin/bash

GIT_ROOT=$(git rev-parse --show-toplevel)
HOOKS_PATH=$(git rev-parse --git-dir)/hooks

if [ ! -d &quot;$HOOKS_PATH&quot; ]; then
  mkdir $HOOKS_PATH
fi

ln -s -f $GIT_ROOT/Scripts/pre-commit.sh $HOOKS_PATH/pre-commit
chmod 555 $HOOKS_PATH/pre-commit

echo &quot;git hooks installed!&quot;
</code></pre>
<p>這樣就可以建立 symbolic link 了。因為目前只有一個 <code>pre-commit.sh</code>，所以這個安裝腳本寫得很簡單，日後如果要安裝的 hook 變多了再來調整就好。</p>
<h3 id="參考資料">參考資料</h3>
<ul>
<li><a href="https://gist.github.com/crsven/c23214992e535836d8244877612f3243">Sorting XCode project file</a></li>
<li><a href="https://mokacoding.com/blog/pre-commit-hooks/">Automation with pre-commit hooks | mokacoding</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何建立不同的 SSH Key 對應到不同的 Github 帳號]]></title>
        <id>https://chiahsien.github.io/post/how-to-use-different-ssh-key-for-different-github-account/</id>
        <link href="https://chiahsien.github.io/post/how-to-use-different-ssh-key-for-different-github-account/">
        </link>
        <updated>2021-06-20T15:51:01.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="情況">情況</h3>
<p>我有私人的 GitHub 帳號，為了方便自己跟公司管理起見，我用公司的信箱申請另一個 GitHub 帳號來存取公司的 repo。</p>
<h3 id="問題">問題</h3>
<p>同一台電腦的一組 SSH Key 只能綁定到一個 GitHub 帳號，無法用同一組 SSH key 綁定到多組帳號，所以我無法把綁到私人帳號的 SSH Key 再綁到公司帳號。</p>
<h3 id="解法">解法</h3>
<p>我要在同一台電腦建立不同的 SSH Key 對應到不同的 GitHub 帳號，並且在執行 <code>git</code> 操作時，系統會自動選擇對應的 SSH key。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="情況">情況</h3>
<p>我有私人的 GitHub 帳號，為了方便自己跟公司管理起見，我用公司的信箱申請另一個 GitHub 帳號來存取公司的 repo。</p>
<h3 id="問題">問題</h3>
<p>同一台電腦的一組 SSH Key 只能綁定到一個 GitHub 帳號，無法用同一組 SSH key 綁定到多組帳號，所以我無法把綁到私人帳號的 SSH Key 再綁到公司帳號。</p>
<h3 id="解法">解法</h3>
<p>我要在同一台電腦建立不同的 SSH Key 對應到不同的 GitHub 帳號，並且在執行 <code>git</code> 操作時，系統會自動選擇對應的 SSH key。</p>
<!-- more -->
<h4 id="1-建立-ssh-key">1. 建立 SSH key</h4>
<p>可以參考 <a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">GitHub 的說明文件</a> 建立多組 SSH Key，大致的步驟如下：</p>
<pre><code>ssh-keygen -t ed25519 -C &quot;your.name@personal.com&quot;
ssh-keygen -t ed25519 -C &quot;your.name@company.com&quot;
</code></pre>
<p>建立的過程會問你要儲存的檔名，建議可以使用 <code>id_ed25519_personal</code> 跟 <code>id_ed25519_company</code> 之類好辨認的名字。</p>
<h4 id="2-把-key-加入-ssh-agent">2. 把 key 加入 ssh-agent</h4>
<p>首先要執行 <code>eval &quot;$(ssh-agent -s)&quot;</code> 啟動 ssh-agent，然後執行以下命令把 key 加到 ssh-agent。</p>
<pre><code>ssh-add id_ed25519_personal
ssh-add id_ed25519_company
</code></pre>
<p>我們可以執行 <code>ssh-add -l</code> 檢查看看是不是有正確加入了。</p>
<h4 id="3-把-ssh-key-加到-github-帳號">3. 把 SSH key 加到 GitHub 帳號</h4>
<p>參考 <a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">GitHub 說明文件</a> 把不同的 SSH Key 加到各自對應的 GitHub 帳號。</p>
<h4 id="4-設定-git-config-指定對應的-user-name-email">4. 設定 git config 指定對應的 user name &amp; email</h4>
<p>在我們打算存放公司 repo 的目錄下，修改 <code>.git/config</code> 檔，加入以下的資訊。</p>
<pre><code>[user]
    name = Your Name
    email = your.name@company.com
</code></pre>
<h4 id="5-重開機之後自動把-key-加入-ssh-agent">5. 重開機之後自動把 key 加入 ssh-agent</h4>
<p>為了避免每次重開機都要手動把 key 加入 ssh-agent，我們還需要一些設定。首先要修改 <code>~/.ssh/config</code> 檔，沒有這個檔就手動建立一個。</p>
<pre><code># Default github account
Host github.com
  HostName github.com
  AddKeysToAgent yes
  IdentitiesOnly yes
  IdentityFile ~/.ssh/id_ed25519_personal

# Company github account
Host github.com-company
  HostName github.com
  AddKeysToAgent yes
  IdentitiesOnly yes
  IdentityFile ~/.ssh/id_ed25519_company
</code></pre>
<p>然後在家目錄底下的 <code>~/.gitconfig</code> 檔加入以下設定。</p>
<pre><code>[url &quot;git@github.com-company:company_github_account/&quot;]
    insteadOf = git@github.com:company_github_account/
</code></pre>
<h3 id="參考資料">參考資料</h3>
<ul>
<li><a href="https://gist.github.com/oanhnn/80a89405ab9023894df7">gist: using-multiple-github-accounts-with-ssh-keys.md</a></li>
<li><a href="https://superuser.com/questions/366649/ssh-config-same-host-but-different-keys-and-usernames">StackOverflow: git - SSH config - same host but different keys and usernames - Super User</a></li>
<li><a href="https://stackoverflow.com/questions/4220416/can-i-specify-multiple-users-for-myself-in-gitconfig/">StackOverflow: Can I specify multiple users for myself in .gitconfig?</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[What Time: 一個寫給孩子的小玩具]]></title>
        <id>https://chiahsien.github.io/post/what-time-a-side-project-for-kid/</id>
        <link href="https://chiahsien.github.io/post/what-time-a-side-project-for-kid/">
        </link>
        <updated>2021-06-09T06:58:58.000Z</updated>
        <content type="html"><![CDATA[<p>我的小孩逐漸長大，到了需要看得懂時鐘的年紀了，但經過多次的嘗試，無論是看圖學習或是寫練習本，他就是記不住要怎麼看指針時鐘。</p>
<p>還好，我是一個工程師，而且是一個會開發 iOS App 的工程師。</p>
<p>既然小孩會被手機 app 吸引、研究報告又證實在遊戲中學習的效果好，那我就來開發一款 app 讓孩子可以不停的練習吧。所以趁著防疫期間，我就做了一個很簡單的 app，它會隨機顯示時間，只要正確輸入顯示的時間，就會再隨機顯示另一組時間。</p>
<p>就是這麼簡單樸實的一個小東西，卻可以讓小孩玩得不亦樂乎，而且效果驚人，不到一個星期他已經會看時鐘了！</p>
<p>有興趣的人可以來這裡<a href="https://github.com/chiahsien/What-Time">下載原始碼</a>，自己安裝到手機上玩。</p>
<figure data-type="image" tabindex="1"><img src="https://github.com/chiahsien/What-Time/raw/main/Screenshot.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何下載、安裝、管理 Xcode]]></title>
        <id>https://chiahsien.github.io/post/xcode-the-right-way/</id>
        <link href="https://chiahsien.github.io/post/xcode-the-right-way/">
        </link>
        <updated>2021-04-28T14:31:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="下載">下載</h3>
<p>不要透過 AppStore，因為速度太慢太不穩定了，要去<a href="https://developer.apple.com/download/more/">官方網站</a>下載才快。但是我們還有更快的方法，可以透過下載軟體同時開啟多條連線下載，我推薦使用 <a href="https://github.com/RobotsAndPencils/XcodesApp">XcodesApp</a> 或 <a href="https://github.com/vineetchoudhary/Downloader-for-Apple-Developers">Downloader-for-Apple-Developers</a>，前者比較漂亮，後者還可以下載 WWDC 的影片。</p>
<h3 id="安裝">安裝</h3>
<p>不要直接解壓縮 <code>xip</code> 檔，這樣會花很長的時間。下指令去解會快很多：</p>
<pre><code class="language-shell">xip -x Xcode.xip
</code></pre>
<h3 id="管理">管理</h3>
<p>可以放多個不同版本的 Xcode 在 Applications 資料夾，只要名稱不一樣就好了，記得要下指令來指定要使用哪個版本。</p>
<pre><code class="language-shell">sudo xcode-select -s /Applications/Xcode.app
</code></pre>
<p>時間久了之後，會產生很多沒再用的檔案佔用空間，我們可以使用 <a href="https://apps.apple.com/tw/app/devcleaner-for-xcode/id1388020431?mt=12">DevCleaner for Xcode</a> 或 <a href="https://github.com/waylybaye/XcodeCleaner-SwiftUI">XcodeCleaner-SwiftUI</a> 來幫忙清理，效果非常的好！</p>
<h3 id="參考資料">參考資料</h3>
<p><a href="https://www.notion.so/Xcode-dfbe2d934ff84b2d84e34ffceef56fe0#9a1443e99f244cc9b699a9bf890e2749">安裝 Xcode 的正確姿勢</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何讓 Android App 透過 UART Port 跟機器通訊]]></title>
        <id>https://chiahsien.github.io/post/android-app-communice-with-device-via-uart-port/</id>
        <link href="https://chiahsien.github.io/post/android-app-communice-with-device-via-uart-port/">
        </link>
        <updated>2021-03-26T10:44:51.000Z</updated>
        <summary type="html"><![CDATA[<p>最近公司內部有個需求，需要開發一個 Android app 裝在我們的機器上，讓它可以透過 UART port 跟機器溝通。過程基本上不難，但還挺繁雜的，乾脆做個紀錄以便日後查詢。</p>
<p>我的開發環境是 Windows 10 搭配 Android Studio 4.1.2</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近公司內部有個需求，需要開發一個 Android app 裝在我們的機器上，讓它可以透過 UART port 跟機器溝通。過程基本上不難，但還挺繁雜的，乾脆做個紀錄以便日後查詢。</p>
<p>我的開發環境是 Windows 10 搭配 Android Studio 4.1.2</p>
<!-- more -->
<h2 id="照著做">照著做</h2>
<p>去 <code>Settings</code> 裡頭，確認 <code>NDK</code> 跟 <code>CMake</code> 都有安裝了。<br>
<img src="https://chiahsien.github.io/post-images/1616599505770.png" alt="" loading="lazy"></p>
<p>建立一個新專案，然後選擇 <code>New -&gt; Folder -&gt; JNI Folder</code>，我們要透過 JNI 的方式調用 C 程式碼跟 UART 溝通。<br>
<img src="https://chiahsien.github.io/post-images/1616599870212.png" alt="" loading="lazy"></p>
<p>下載這個<a href="../../post-attachments/JNI.zip">壓縮檔</a>，解開之後有五個檔案，把它們放到剛剛建立的 JNI 目錄裡頭。<br>
<img src="https://chiahsien.github.io/post-images/1616599985206.png" alt="" loading="lazy"></p>
<p>在 <code>java</code> 目錄按右鍵，選擇 <code>New -&gt; Package</code>，建立一個名叫 <code>android_serialport_api</code> 的 package。注意：一定要叫這個名字。<br>
<img src="https://chiahsien.github.io/post-images/1616601712096.png" alt="" loading="lazy"></p>
<p>在剛剛建立的 package 裡頭建立一個 <code>Java Class</code>，名字要叫做 <code>SerialPort</code>。<br>
<img src="https://chiahsien.github.io/post-images/1616601785378.png" alt="" loading="lazy"></p>
<p>這時候應該產生一個 <code>SerialPort.java</code> 了，用<a href="../../post-attachments/SerialPort.java">這個檔案</a>替換它的內容。</p>
<p>在 <code>app</code> 目錄按右鍵，選擇 <code>Link C++ Project with Gradle</code>。<br>
<img src="https://chiahsien.github.io/post-images/1616601959920.png" alt="" loading="lazy"></p>
<p>此時會跳出一個對話框，<code>Build System</code> 選擇 <code>ndk-build</code>，<code>Project Path</code> 選擇剛剛放到 JNI 目錄的 <code>Android.mk</code>。<br>
<img src="https://chiahsien.github.io/post-images/1616602073216.png" alt="" loading="lazy"></p>
<p>選好之後就可以 <code>Build -&gt; Make Project</code>，一切順利的話會產出 <code>libserial_port.so</code>。</p>
<p>做為測試用的 app，我們的 <code>MainActivity.java</code> 可以這樣寫，記得把 UART port 的路徑以及 baud rate 改成你的環境：</p>
<pre><code class="language-java">import android_serialport_api.SerialPort;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = &quot;MainActivity&quot;;

    protected SerialPort mSerialPort;
    protected InputStream mInputStream;
    protected OutputStream mOutputStream;
    private ReadThread mReadThread;

    private class ReadThread extends Thread {
        @Override
        public void run() {
            super.run();

            Log.e(TAG, &quot;Read thread is open.&quot;);
            while (!isInterrupted()) {
                if (mInputStream == null)
                    return;

                try {
                    byte[] buffer = new byte[64];
                    int size = mInputStream.read(buffer);
                    if (size &gt; 0) {
                        onDataReceived(buffer, size);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    return;
                }
            }
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        try {
            Log.e(TAG, &quot;Try to open serial port&quot;);
            mSerialPort = new SerialPort(new File(&quot;/dev/ttyXXX&quot;), 115200, 0);
            mInputStream = mSerialPort.getInputStream();
            mOutputStream = mSerialPort.getOutputStream();
            Log.e(TAG, &quot;Serial port opened!&quot;);

            mReadThread = new ReadThread();
            mReadThread.start();
        } catch (SecurityException e) {
            Log.e(TAG, &quot;Security Exception&quot;);
            e.printStackTrace();
        } catch (IOException e) {
            Log.e(TAG, &quot;Fail to open serial port&quot;);
            e.printStackTrace();
        }

        try {
            mOutputStream.write(&quot;help&quot;.getBytes());
            mOutputStream.write('\n');
        } catch (IOException e) {
            Log.e(TAG, &quot;Fail to send out message&quot;);
            e.printStackTrace();
        }
    }

    @Override
    protected void onDestroy() {
        Log.d(TAG, &quot;in onDestroy()&quot;);
        if (mReadThread != null) {
            mReadThread.interrupt();
        }

        if (mSerialPort != null) {
            mSerialPort.close();
            mSerialPort = null;

            try {
                mOutputStream.close();
                mOutputStream = null;
                mInputStream.close();
                mInputStream = null;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        super.onDestroy();
    }

    protected void onDataReceived(final byte[] buffer, final int size) {
        runOnUiThread(() -&gt; {
            String receivedMessage = new String(buffer, 0, size);
            Log.d(TAG, &quot;Received message: &quot; + receivedMessage);
        });
    }
}
</code></pre>
<p>我們可以試試看 <code>Build -&gt; Clean Project</code> 然後 <code>Build -&gt; Rebuild Project</code>，確認一切都正常，沒事的話就可以跑在機器上了。</p>
<h2 id="問題排解">問題排解</h2>
<p>Q：Compile 失敗了<br>
A：確認剛剛建立的 packange 名稱是 <code>android_serialport_api</code>，以及建立的 class 名稱是 <code>SerialPort.java</code>。</p>
<p>Q：照做了還是無法通訊？<br>
A：確認 Android 跟 port 是可以通的，有可能根本不能存取那個 port。</p>
<p>Q：確認過了還是無法通訊？<br>
A：確認路徑跟 baud rate 是對的。</p>
<p>Q：確認過路徑跟 baud rate 了，還是無法通訊？<br>
A：可能是權限問題，執行以下命令再試試看。</p>
<pre><code>adb shell
su
chmod 777 /dev/ttyXXX
setenforce 0
</code></pre>
<p>Q：如果還是不行呢？<br>
A：換一台硬體試試看。</p>
<h2 id="參考資料">參考資料</h2>
<ul>
<li><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/608813/">Android Studio jni開發 串列埠通訊</a></li>
<li><a href="https://www.itread01.com/content/1548427166.html">Android：java.io.IOException: Cannot run program “/system/xbin/su”: error=13, Permission denied</a></li>
<li><a href="https://www.logcg.com/zh-tw/archives/2831.html">Android 安卓開發板 讀取串口</a></li>
<li><a href="https://code.google.com/archive/p/android-serialport-api/source/default/source">Google Code Archive</a></li>
<li><a href="https://github.com/braincs/AndroidSerialLibrary">braincs/AndroidSerialLibrary</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我是如何開始投資的]]></title>
        <id>https://chiahsien.github.io/post/how-do-i-start-my-investment/</id>
        <link href="https://chiahsien.github.io/post/how-do-i-start-my-investment/">
        </link>
        <updated>2021-03-03T17:45:51.000Z</updated>
        <summary type="html"><![CDATA[<p>出社會也十幾年了，雖然看過不少書，也上了一些課，早期也有試著投資一些東西。但嚴格說起來，真的找到自己舒服的方式並且持續的投資，是從去年才開始的。這樣的投資方式持續了整整一年，沒意外的話應該也會持續下去，藉由這篇文章記錄一些我的作法。</p>
]]></summary>
        <content type="html"><![CDATA[<p>出社會也十幾年了，雖然看過不少書，也上了一些課，早期也有試著投資一些東西。但嚴格說起來，真的找到自己舒服的方式並且持續的投資，是從去年才開始的。這樣的投資方式持續了整整一年，沒意外的話應該也會持續下去，藉由這篇文章記錄一些我的作法。</p>
<!-- more -->
<h3 id="第一步記帳">第一步：記帳</h3>
<p>對我來說，記帳是很重要的的一個步驟。它可以讓我檢視每個月都把錢花到哪裏、控制自己不必要的開銷、知道是否入不敷出、知道每個月至少需要多少錢才能過活。了解自己賺多少、花多少、實際需要多少是很重要的一個環節，而記帳是這些問題的解答。</p>
<p>我從大學時期就開始記帳，那個時候還沒有智慧型手機，所以我都用電腦版的記帳工具一筆筆的記錄下來。後來智慧型手機出現，有了 app 之後記帳就變得非常簡單，也因為隨時隨地都能記帳，所以我幾乎把每一筆收支都紀錄下來。對於記帳 app，我建議可以這樣選擇：</p>
<ol>
<li>選擇需要付費的，不要用免費的。記帳是一件需要持之以恆的事，選擇要付費購買的 app，比較不會遇到開發者停止維護的情況；另外也因為你花錢買了，比較容易持續使用它。</li>
<li>選擇排名靠前的，每個都裝來試試看。排名靠前的 app 比較不會差到哪裏去，記帳需要持之以恆，所以挑一個看得順眼、用得順手的很重要，這樣才容易培養記帳習慣。不確定哪個好用，就每個都試試看一兩週，大概就知道了。</li>
<li>選擇功能簡單的。記帳是為了知道賺多少、花多少、實際需要多少，所以選擇功能簡單並且有報表功能的就可以了。有些 app 會把功能設計得很齊全，許多專業的需求都考量到了，但我覺得這只會嚇跑沒有記帳習慣的入門者。為了容易培養記帳習慣，選擇功能符合你需求的，不要選擇功能齊全專業的。</li>
</ol>
<h3 id="第二步檢視收支">第二步：檢視收支</h3>
<p>選好記帳 app 之後，剩下的就是讓自己習慣記帳這個動作。能夠每一筆都紀錄下來最好，至少至少也要把每個月的固定開銷以及大筆收入跟支出都記下來。然後就可以每個月固定一個時間（例如發薪日）檢視收支，藉由固定時間檢視收支，我們可以知道以下這些事：</p>
<ol>
<li>每個月大約花多少錢</li>
<li>每個月可以存多少錢</li>
<li>每個月的必要花費是多少（房租房貸、管理費、水電瓦斯、網路跟通話費、學雜費、餐費、保險等等）</li>
<li>有哪些非必要支出可以減少（各種訂閱、聚餐聚會、飲料點心、衣物飾品配件、3C、大人的玩具等等）</li>
<li>有哪些必要支出可以增加（上課、買書、身體保健、運動等等）</li>
</ol>
<h3 id="第三步存錢">第三步：存錢</h3>
<p>「用閒錢去投資」是很多投資者或投資書籍會提到的一句話，那什麼是閒錢？就是你賠光了也不會餓死的錢。所以為了不會餓死，需要準備一筆「緊急預備金」，根據每個人的自身情況不同（單薪雙薪、有無小孩、有無貸款、工作是否好找、年紀等等），通常需要準備 6～12 個月的必要花費。所以必須先記帳，才能掌握每個月的必要花費是多少，然後才知道預備金需要準備多少。</p>
<p>既然是緊急預備金，所以這筆錢會放在比較穩定的地方，不會隨意動用。最常見的做法是放在銀行定存，可以把金額分成好幾筆小額定存（網路銀行很方便，不用擔心被櫃檯行員翻白眼），真的遇到需要動用的時候就比較有彈性。或者拿去抽股票，一年只要抽中一次，獲利可能就比定存利息高了。</p>
<h3 id="第四步投資">第四步：投資</h3>
<p>首先要投資自己。多花一些錢去買書來看，或是去上課學習更多技能，然後把學到的東西應用到實際工作上，提高自己的賺錢能力。或是去培養運動習慣，以及適量補充一些保健食品，讓自己有個健康的身體，健康真的是一切的根本。</p>
<p>然後要投資市場，市場上可以選擇的項目有很多種，最常見的有股票、基金、債券、房地產、期貨、貨幣等等，投資方法也有很多流派，建議先大量閱讀感興趣的入門書（不建議看經典，因為經典是給有投資歷練的人看的，沒痛過的人看不懂），然後小額的多方嘗試，找到最適合自己的方式。</p>
<p>對於絕大多數的一般人來說，一開始不知道要投資什麼的話，被動追蹤大盤的指數型 ETF 會是不錯的選擇，以台股來說就是 0050 跟 006208 這兩支。</p>
<p>有人認為要先存到一筆「緊急預備金」然後再把剩下的錢拿去投資，我認為如果臨時需要動用緊急預備金的機率不高的話（例如工作很穩、工作內容低風險、身體健康、平日開銷不高等等），其實兩者可以同時進行。例如把每個月可以存下的錢拿一半去投資 0050 或 006208，畢竟投資時間越長，複利效果越好。</p>
<h3 id="第五步紀錄">第五步：紀錄</h3>
<p>目前我的投資方法很簡單，因為已經有緊急預備金了，所以我會在每個月發薪日當天把薪轉戶剩下的錢都匯到投資戶頭，然後按一定比例投資到不同標的。然後除了用 app 紀錄我的投資之外，也用試算表紀錄每個月發薪日當天的資產總額，藉此大致掌握自身的財務狀況。</p>
<p>這個方法很簡單，操作也很固定，所以容易持之以恆，讓我有更多時間做其他事情。目前這樣操作維持一年了，感覺很不錯，應該會繼續保持下去。</p>
<h3 id="附錄">附錄</h3>
<ul>
<li>我用的記帳 app 是 <a href="https://moze.app/">Moze</a>，它只有 iOS 版。它的<a href="https://doc.moze.app/">教學文件</a>寫得很好，說明許多記帳相關的概念，就算不使用這個 app 也應該看一看。</li>
<li>我用的交易紀錄 app 是 <a href="https://peeksoft.co/">My Stocks Portfolio</a>，它有 iOS 跟 Android 版，可以追蹤與紀錄美股跟其他國家（包含台灣）的股票，支援各種貨幣對，也支援虛擬貨幣。它的介面還算好看，支援的投資種類剛好是我需要的，而且免費版就很好用了。</li>
<li>想要知道存多少錢才可以退休，可以用 <a href="https://apps.apple.com/tw/app/deposit-plan/id1439862547">Deposit Plan</a> 算算看。</li>
<li>我幫小孩開了他們自己的證券戶，每個月定期定額買 0050，壓歲錢跟零用錢跟股利也會再投入。如果一切順利的話，等到小孩長大成人，到時的複利效果應該很不錯。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第三方 Kobo 閱讀軟體：KOReader & Plato]]></title>
        <id>https://chiahsien.github.io/post/alternative-kobo-e-reader-koreader-and-plato/</id>
        <link href="https://chiahsien.github.io/post/alternative-kobo-e-reader-koreader-and-plato/">
        </link>
        <updated>2020-09-13T07:46:36.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="為何需要第三方閱讀軟體">為何需要第三方閱讀軟體</h4>
<p>Kobo 閱讀器內建的軟體在閱讀它們自家電子書的表現，其實已經很符合絕大多數人的需求了。但如果你有以下需求，就會想要尋找更強大的閱讀軟體：</p>
<ul>
<li>想看其他來源的電子書：如果那本電子書排版沒有設計得很好，加上內建的閱讀軟體可調整的選項不多，這樣讀起來就會有些痛苦。</li>
<li>想要閱讀 PDF 檔：很多 PDF 檔四周會留下不少空白，它又不能調整文字大小，甚至有的 PDF 是兩欄或三欄的排版，在十吋以下的螢幕閱讀會非常辛苦。由於電子紙的物理特性，不能一直放大縮小移動頁面，所以很難閱讀。</li>
<li>想看其他的電子書格式，但是系統不支援。</li>
</ul>
<p>做了一些功課之後，我發現目前在 Kobo 系統上比較多人使用的就是 KOReader 跟 Plato 這兩套閱讀器，簡單整理成一張表格給有興趣嘗試的人參考。</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="為何需要第三方閱讀軟體">為何需要第三方閱讀軟體</h4>
<p>Kobo 閱讀器內建的軟體在閱讀它們自家電子書的表現，其實已經很符合絕大多數人的需求了。但如果你有以下需求，就會想要尋找更強大的閱讀軟體：</p>
<ul>
<li>想看其他來源的電子書：如果那本電子書排版沒有設計得很好，加上內建的閱讀軟體可調整的選項不多，這樣讀起來就會有些痛苦。</li>
<li>想要閱讀 PDF 檔：很多 PDF 檔四周會留下不少空白，它又不能調整文字大小，甚至有的 PDF 是兩欄或三欄的排版，在十吋以下的螢幕閱讀會非常辛苦。由於電子紙的物理特性，不能一直放大縮小移動頁面，所以很難閱讀。</li>
<li>想看其他的電子書格式，但是系統不支援。</li>
</ul>
<p>做了一些功課之後，我發現目前在 Kobo 系統上比較多人使用的就是 KOReader 跟 Plato 這兩套閱讀器，簡單整理成一張表格給有興趣嘗試的人參考。</p>
<!-- more -->
<h4 id="比較表">比較表</h4>
<table>
<thead>
<tr>
<th></th>
<th>KOReader</th>
<th>Plato</th>
</tr>
</thead>
<tbody>
<tr>
<td>網站</td>
<td><a href="https://github.com/koreader/koreader">https://github.com/koreader/koreader</a></td>
<td><a href="https://github.com/baskerville/plato">https://github.com/baskerville/plato</a></td>
</tr>
<tr>
<td>支援裝置</td>
<td>Cervantes, Kindle, Kobo, PocketBook, reMarkable, Android, Linux</td>
<td>Kobo</td>
</tr>
<tr>
<td>支援檔案</td>
<td>PDF, DjVu, CBT, CBZ, ePUB, FB2, Mobi, DOC, CHM, TXT</td>
<td>PDF, CBZ, FB2, XPS, ePUB, DjVu</td>
</tr>
<tr>
<td>介面</td>
<td>繁瑣、複雜</td>
<td>簡單、美觀</td>
</tr>
<tr>
<td>自訂性</td>
<td>除了一般的閱讀設定之外，還可以：<br />設定段落開頭縮排、上下左右不同邊距、字體的 kerning 與 hinting、自動偵測 PDF 可視範圍、PDF 轉文字重新排版、去除 PDF 浮水印。<br /><br />除此之外，還可以自訂進度條與狀態列，甚至還可以自訂多種不同手勢的動作。</td>
<td>一般的閱讀設定，像是：<br />調整字體與大小、調整邊距與行距、PDF 設定可視範圍、調整文字圖像對比度。</td>
</tr>
<tr>
<td>擴充性</td>
<td>支援 plugin 擴充其他功能，例如閱讀統計、雲端硬碟、Calibre 傳書、閱讀進度同步等等。</td>
<td>無法自行擴充，目前有計算機與素描板的功能。</td>
</tr>
<tr>
<td>缺點</td>
<td>不支援中文直排，不易上手，比較耗電</td>
<td>功能比較少，沒有中文化</td>
</tr>
<tr>
<td>備註</td>
<td>點擊畫面上方或下方顯示不同工具列，各個設定長按會跳出說明與設為預設值選項。</td>
<td>點擊畫面中間顯示工具列。</td>
</tr>
</tbody>
</table>
<h4 id="安裝方式">安裝方式</h4>
<p>這個安裝方式僅適用於 Kobo 閱讀器。</p>
<ol>
<li>將 Kobo 閱讀器連接到電腦，確認電腦有辨識到裝置。</li>
<li>到<a href="https://www.mobileread.com/forums/showpost.php?p=3797095&amp;postcount=1">這篇文章</a>的結尾下載你需要的 zip 檔，下載之後<strong>不需要</strong>解壓縮。</li>
<li>到<a href="https://www.mobileread.com/forums/showpost.php?p=3797096&amp;postcount=2">這篇文章</a>的結尾下載你的作業系統的自動安裝腳本，解壓縮之後跟剛才的 zip 檔放在一起。</li>
<li>執行安裝腳本並選擇要安裝的程式。</li>
<li>安裝完畢後，安全地退出 Kobo 裝置，如果它沒自動重開機，就手動重開。</li>
<li>重開之後，就會看到新的選單項目了。</li>
<li>更新方式就是以上步驟全部重做一遍，這樣最保險。</li>
<li>Kobo 系統升級之後，也需要重新安裝一遍。</li>
</ol>
<h4 id="如何選擇">如何選擇</h4>
<p>並不是說功能強大的就一定比較好，功能再多但是沒用到也只是在耗電，所以我建議可以兩個都裝起來玩玩看，個別看過幾本電子書跟 PDF 之後，大概就知道哪個符合自身閱讀需求了。</p>
<p>我平常都用 Kobo 原生的閱讀軟體，只有在看排版不好的電子書以及 PDF 的時候，才會啟動 KOReader，而且我把絕大多數的擴充功能都關閉，因為我只需要它的閱讀功能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[買了一台 Kobo 電子書閱讀器]]></title>
        <id>https://chiahsien.github.io/post/my-kobo-e-reader/</id>
        <link href="https://chiahsien.github.io/post/my-kobo-e-reader/">
        </link>
        <updated>2020-07-01T16:11:27.000Z</updated>
        <summary type="html"><![CDATA[<p>我是一個還蠻喜歡看書的人，實體書跟電子書也都有在買，之前就一直對電子書閱讀器感興趣，但因為早期電子紙的技術還不是很成熟所以沒有特別去關注。最近某一天，突然很想很想買一台電子書閱讀器，所以就開始 Google 各家閱讀器的特色與優缺點。</p>
<p>現在各家閱讀器都做得很不錯了，除非很倒霉買到機王，不然大部分的人應該都可以用得很開心。看過許多篇評比文章（例如<a href="https://twinsyang.net/archives/20998">這篇</a>），也爬過一些臉書社團（例如<a href="https://www.facebook.com/groups/ereadingclub/">這個</a>），最後總結出來挑選閱讀器的幾個要點，使用排除法大概就可以知道哪台閱讀器比較適合自己：</p>
]]></summary>
        <content type="html"><![CDATA[<p>我是一個還蠻喜歡看書的人，實體書跟電子書也都有在買，之前就一直對電子書閱讀器感興趣，但因為早期電子紙的技術還不是很成熟所以沒有特別去關注。最近某一天，突然很想很想買一台電子書閱讀器，所以就開始 Google 各家閱讀器的特色與優缺點。</p>
<p>現在各家閱讀器都做得很不錯了，除非很倒霉買到機王，不然大部分的人應該都可以用得很開心。看過許多篇評比文章（例如<a href="https://twinsyang.net/archives/20998">這篇</a>），也爬過一些臉書社團（例如<a href="https://www.facebook.com/groups/ereadingclub/">這個</a>），最後總結出來挑選閱讀器的幾個要點，使用排除法大概就可以知道哪台閱讀器比較適合自己：</p>
<!-- more -->
<ul>
<li>在哪買書看書：Amazon、Kobo、讀墨、Google Play、博客來、圖書館、其他</li>
<li>封閉式或開放式系統：通常封閉式系統比較穩定跟省電，開放式系統可以裝其他書店的 app</li>
<li>是否排斥 Android 系統</li>
<li>是否時常帶出門</li>
<li>是否常看 PDF 或漫畫</li>
<li>是否需要手寫筆記功能</li>
<li>是否需要彩色電子紙</li>
</ul>
<p>根據我自己的需求，</p>
<ul>
<li>我喜歡封閉式系統，又希望可以方便入手，所以就從 Amazon Kindle / Kobo / 讀墨 mooInk 這三家挑。</li>
<li>我主要看中文書，所以先把方便購買外文書為主的 Kindle 排除，剩下 Kobo 跟讀墨。</li>
<li>我不需要手寫，希望每天通勤都能帶出門，所以鎖定 8 吋以下的機型（不會比 iPad mini 大台）。</li>
<li>實際看過摸過用過之後，發現我不太喜歡 Android 系統。</li>
<li>我希望可以把電子書下載到電腦保存，日後如果換了閱讀器還可以繼續看。</li>
</ul>
<p>所以最後我選擇了 Kobo 的 <a href="https://www.rakuten.com.tw/shop/rakutenkobojapan/product/Libra/">Kobo Libra H2O</a>。它有實體翻頁鍵、7 吋的畫面、防水、待機時間夠久、整合 <a href="https://app.getpocket.com/">Pocket</a> 稍後閱讀服務、支援繁體中文。</p>
<p>用到目前很開心，也看了不少本書，推薦大家可以開始考慮電子書閱讀器了！如果對閱讀器感興趣，在台北的人可以去三創的三樓跟七樓看各家的實機。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iBeacon 的 Swift 開發筆記]]></title>
        <id>https://chiahsien.github.io/post/ibeacon-development-in-swift/</id>
        <link href="https://chiahsien.github.io/post/ibeacon-development-in-swift/">
        </link>
        <updated>2020-03-08T06:11:42.000Z</updated>
        <summary type="html"><![CDATA[<p>最近因為工作上的需求，需要透過 app 與支援 iBeacon 的裝置溝通，所以整理了一些筆記。在 iOS 的世界，app 可以作為 iBeacon 的接收者，也可以讓裝置作為 iBeacon 的發送者，這裡我只紀錄前者（接收者）的開發。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近因為工作上的需求，需要透過 app 與支援 iBeacon 的裝置溝通，所以整理了一些筆記。在 iOS 的世界，app 可以作為 iBeacon 的接收者，也可以讓裝置作為 iBeacon 的發送者，這裡我只紀錄前者（接收者）的開發。</p>
<!-- more -->
<h2 id="開發步驟">開發步驟</h2>
<h3 id="1-定位服務的設定">1. 定位服務的設定</h3>
<p>iBeacon 的接收需要使用到定位服務，所以首先需要做以下這些設定：</p>
<ol>
<li>加入 <code>CoreLocation.framework</code></li>
<li>在 <code>Info.plist</code> 加入 <code>NSLocationWhenInUseUsageDescription</code> key，如果需要在背景偵測是否有進入或離開 iBeacon 範圍，就要另外加入 <code>NSLocationAlwaysUsageDescription</code> key</li>
<li>在程式碼加入 <code>import CoreLocation</code></li>
</ol>
<h3 id="2-開始定位-ibeacon">2. 開始定位 iBeacon</h3>
<p>簡化起見，我們把程式碼放在 ViewController 裡頭，以下程式碼即可開始偵測 iBeacon。</p>
<pre><code class="language-swift">import CoreLocation

class ViewController: UIViewController {
    let locationManager = CLLocationManager()

    override func viewDidLoad() {
        super.viewDidLoad()

        locationManager.requestAlwaysAuthorization()
        locationManager.delegate = self

        let uuid = UUID(uuidString: &quot;12345678-1234-1234-1234-123456789ABC&quot;)!
        let region = CLBeaconRegion(proximityUUID: uuid, identifier: &quot;iBeacon Region&quot;)
        locationManager.startMonitoring(for: region)
    }
}
</code></pre>
<p>每個 iBeacon 裝置都會廣播三種資料用來作為裝置辨識，分別是 <code>UUID</code>、<code>major</code>、<code>minor</code>。舉個常見的場景：假設我是某店家，我可以把所有佈置的 iBeacon 裝置都設定同一組 <code>UUID</code>，然後設定不同的 <code>major</code> 代表這個裝置放在哪棟建築物，<code>minor</code> 代表這個裝置的編號。當我開發的 app 連上裝置後，就可以透過 <code>major</code> 跟 <code>minor</code> 得知目前的位置，藉此提供給使用者相關的資訊。</p>
<p>在上述的程式碼，我設定的 region 只有 <code>UUID</code>，代表符合這個 UUID 的裝置都可以被偵測。根據需求不同，也可以額外設定 <code>major</code> 或 <code>minor</code>。</p>
<p><code>locationManager</code> 呼叫 <code>startMonitoring(for:)</code> 就會開始偵測 iBeacon 裝置，然後把結果回報給 <code>delegate</code>，所以接下來我們要處理 delegate callbacks。</p>
<h3 id="3-處理-delegate-callbacks">3. 處理 delegate callbacks</h3>
<p>我們把 callbacks 放在 <code>extension ViewController: CLLocationManagerDelegate { }</code> 裡頭，首先來處理錯誤。</p>
<pre><code class="language-swift">func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
    print(&quot;Location manager did fail: \(error.localizedDescription)&quot;)
}
func locationManager(_ manager: CLLocationManager, monitoringDidFailFor region: CLRegion?, withError error: Error) {
    print(&quot;Location manager monitoring did fail: \(error.localizedDescription)&quot;)
}
</code></pre>
<p>再來處理定位範圍。</p>
<pre><code class="language-swift">func locationManager(_ manager: CLLocationManager, didEnterRegion region: CLRegion) {
    guard region is CLBeaconRegion else { return }
    // 在這裡做一些進入 region 的處理，例如提供一些提示
    guard CLLocationManager.isRangingAvailable() else { return }
    // 既然進入 region 了，那就偵測跟裝置的距離
    manager.startRangingBeacons(in: region as! CLBeaconRegion)
}

func locationManager(_ manager: CLLocationManager, didExitRegion region: CLRegion) {
    guard region is CLBeaconRegion else { return }
    // 在這裡做一些離開 region 的處理，例如提供一些提示
    guard CLLocationManager.isRangingAvailable() else { return }
    // 既然離開 region 了，那就停止偵測跟裝置的距離
    manager.stopRangingBeacons(in: region as! CLBeaconRegion)
}
</code></pre>
<p>上述兩個 callbacks 只有在進入跟離開範圍時，才會被呼叫。如果啟動 app 的時候已經在 iBeacon 裝置範圍內，則不會收到進入範圍的通知，所以我們需要額外的處理。</p>
<pre><code class="language-swift">func locationManager(_ manager: CLLocationManager, didStartMonitoringFor region: CLRegion) {
    // 開始偵測範圍之後，就先檢查目前的 state 是否在範圍內
    manager.requestState(for: region)
}

func locationManager(_ manager: CLLocationManager, didDetermineState state: CLRegionState, for region: CLRegion) {
    guard region is CLBeaconRegion else { return }

    if state == .inside { // 在範圍內
        if CLLocationManager.isRangingAvailable() {
            manager.startRangingBeacons(in: region as! CLBeaconRegion)
        }
    } else if state == .outside { // 在範圍外
        if CLLocationManager.isRangingAvailable() {
            manager.stopRangingBeacons(in: region as! CLBeaconRegion)
        }
    }
}
</code></pre>
<p>最後來處理定位距離。</p>
<pre><code class="language-swift">func locationManager(_ manager: CLLocationManager, rangingBeaconsDidFailFor region: CLBeaconRegion, withError error: Error) {
    print(&quot;Location manager ranging beacons did fail: \(error.localizedDescription)&quot;)
}

func locationManager(_ manager: CLLocationManager, didRangeBeacons beacons: [CLBeacon], in region: CLBeaconRegion) {
    // beacons 是一個 array，裡頭的 beacon 由近到遠排序
    if let beacon = beacons.first {
        // 取得距離最近的 beacon 了，作些事情吧
    }
}
</code></pre>
<h3 id="4-處理背景偵測">4. 處理背景偵測</h3>
<p>如果我們需要在沒有啟動 app 的時候，也能收到進入或離開 beacon 範圍的通知，那我們需要在 <code>AppDelegate</code> 做一些設定。</p>
<pre><code class="language-swift">import CoreLocation

class AppDelegate: UIResponder, UIApplicationDelegate {
    let locationManager = CLLocationManager()

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound]) { (granted, error) in
        }
        locationManager.delegate = self
        return true
    }
}

extension AppDelegate: CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager, didEnterRegion region: CLRegion) {
        guard region is CLBeaconRegion else { return }

        let content = UNMutableNotificationContent()
        content.title = &quot;iBeacon Demo&quot;
        content.body = &quot;You enter a region&quot;
        content.sound = .default

        let request = UNNotificationRequest(identifier: &quot;Demo&quot;, content: content, trigger: nil)
        UNUserNotificationCenter.current().add(request, withCompletionHandler: nil)
    }

    func locationManager(_ manager: CLLocationManager, didExitRegion region: CLRegion) {
        guard region is CLBeaconRegion else { return }

        let content = UNMutableNotificationContent()
        content.title = &quot;iBeacon Demo&quot;
        content.body = &quot;You exit a region&quot;
        content.sound = .default

        let request = UNNotificationRequest(identifier: &quot;Demo&quot;, content: content, trigger: nil)
        UNUserNotificationCenter.current().add(request, withCompletionHandler: nil)
    }
}
</code></pre>
<h2 id="注意事項">注意事項</h2>
<ul>
<li>需要實體機器開發 iBeacon app，Simulator 有諸多不便。</li>
<li>Beacon 是單向廣播，app 只能接收，不能跟 beacon 溝通。廣播的資料只有 <code>UUID</code>、<code>major</code>、<code>minor</code>，沒有其他資訊。app 收到這些資訊之後需要自行發揮創意，決定要做什麽事（例如可以打 API 跟 server 查詢這組 <code>major + minor</code> 代表什麼地點）。</li>
<li>UUID 的格式是 <code>12345678-1234-1234-1234-123456789ABC</code>，16進位字串，大小寫不拘。</li>
<li>最多只能 monitor 20 個 beacon，想要更多的話要自己手動管理。</li>
<li>記得要檢查 <code>isMonitoringAvailable(for:)</code> 跟 <code>isRangingAvailable()</code>。</li>
<li>只有在進入或離開 region 才會觸發通知，在 region 內任何的移動並不會造成持續一直接收通知。</li>
<li>要偵測 beacon，需要 <code>CoreLocation</code>，要作爲 beacon，需要 <code>CoreBluetooth</code>。</li>
<li>如果只是需要使用者位置，用 <code>NSLocationWhenInUseUsageDescription</code> key，呼叫 <code>requestWhenInUseAuthorization()</code>；如果需要在背景接收 notification，除了這個 key 還要加上 <code>NSLocationAlwaysUsageDescription</code> key，呼叫 <code>requestAlwaysAuthorization()</code></li>
<li>Monitoring 用來偵測是否在 beacon 範圍内；Ranging 用來判斷跟 beacon 的距離遠近。所以先用 monitor，在範圍内才啓動 ranging，ranging 很耗電，所以不要在背景做這件事。</li>
</ul>
<h2 id="參考資料">參考資料</h2>
<ul>
<li><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/LocationAwarenessPG/RegionMonitoring/RegionMonitoring.html#//apple_ref/doc/uid/TP40009497-CH9-SW1">Region Monitoring and iBeacon</a></li>
<li><a href="https://developer.apple.com/ibeacon/Getting-Started-with-iBeacon.pdf">Getting Started with iBeacon.pdf</a></li>
<li><a href="https://www.raywenderlich.com/632-ibeacon-tutorial-with-ios-and-swift">iBeacon Tutorial with iOS and Swift</a></li>
<li><a href="https://stackoverflow.max-everyday.com/2018/04/ios-ibeacon-tutorial/">iBeacon Tutorial</a></li>
<li><a href="https://medium.com/@jerrywang0420/ibeacon-%E6%95%99%E5%AD%B8-swift-3-ios-1d4ea88311be">iBeacon 教學</a></li>
<li><a href="https://github.com/rabschi/awesome-beacon">Awesome Beacon</a></li>
</ul>
]]></content>
    </entry>
</feed>